// Code generated by go-swagger; DO NOT EDIT.

package appmgr_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Xapp xapp
// swagger:model Xapp
type Xapp struct {

	// instances
	Instances []*XappInstance `json:"instances"`

	// name
	// Required: true
	Name *string `json:"name"`

	// xapp status in the RIC
	// Enum: [unknown deployed deleted superseded failed deleting]
	Status string `json:"status,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this xapp
func (m *Xapp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Xapp) validateInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.Instances) { // not required
		return nil
	}

	for i := 0; i < len(m.Instances); i++ {
		if swag.IsZero(m.Instances[i]) { // not required
			continue
		}

		if m.Instances[i] != nil {
			if err := m.Instances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Xapp) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var xappTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","deployed","deleted","superseded","failed","deleting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		xappTypeStatusPropEnum = append(xappTypeStatusPropEnum, v)
	}
}

const (

	// XappStatusUnknown captures enum value "unknown"
	XappStatusUnknown string = "unknown"

	// XappStatusDeployed captures enum value "deployed"
	XappStatusDeployed string = "deployed"

	// XappStatusDeleted captures enum value "deleted"
	XappStatusDeleted string = "deleted"

	// XappStatusSuperseded captures enum value "superseded"
	XappStatusSuperseded string = "superseded"

	// XappStatusFailed captures enum value "failed"
	XappStatusFailed string = "failed"

	// XappStatusDeleting captures enum value "deleting"
	XappStatusDeleting string = "deleting"
)

// prop value enum
func (m *Xapp) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, xappTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Xapp) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Xapp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Xapp) UnmarshalBinary(b []byte) error {
	var res Xapp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
