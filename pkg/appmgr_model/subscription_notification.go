// Code generated by go-swagger; DO NOT EDIT.

package appmgr_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionNotification subscription notification
// swagger:model subscriptionNotification
type SubscriptionNotification struct {

	// Event to be notified
	// Enum: [created deleted updated]
	EventType string `json:"eventType,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`

	// x apps
	XApps AllXapps `json:"xApps,omitempty"`
}

// Validate validates this subscription notification
func (m *SubscriptionNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXApps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var subscriptionNotificationTypeEventTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["created","deleted","updated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionNotificationTypeEventTypePropEnum = append(subscriptionNotificationTypeEventTypePropEnum, v)
	}
}

const (

	// SubscriptionNotificationEventTypeCreated captures enum value "created"
	SubscriptionNotificationEventTypeCreated string = "created"

	// SubscriptionNotificationEventTypeDeleted captures enum value "deleted"
	SubscriptionNotificationEventTypeDeleted string = "deleted"

	// SubscriptionNotificationEventTypeUpdated captures enum value "updated"
	SubscriptionNotificationEventTypeUpdated string = "updated"
)

// prop value enum
func (m *SubscriptionNotification) validateEventTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, subscriptionNotificationTypeEventTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SubscriptionNotification) validateEventType(formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventTypeEnum("eventType", "body", m.EventType); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionNotification) validateXApps(formats strfmt.Registry) error {

	if swag.IsZero(m.XApps) { // not required
		return nil
	}

	if err := m.XApps.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("xApps")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionNotification) UnmarshalBinary(b []byte) error {
	var res SubscriptionNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
