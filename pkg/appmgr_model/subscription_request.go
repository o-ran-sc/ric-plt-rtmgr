// Code generated by go-swagger; DO NOT EDIT.

package appmgr_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionRequest subscription request
// swagger:model subscriptionRequest
type SubscriptionRequest struct {

	// Event which is subscribed
	// Required: true
	// Enum: [created deleted all]
	EventType *string `json:"eventType"`

	// Maximum number of retries
	// Required: true
	MaxRetries *int64 `json:"maxRetries"`

	// Time in seconds to wait before next retry
	// Required: true
	RetryTimer *int64 `json:"retryTimer"`

	// target Url
	// Required: true
	TargetURL *string `json:"targetUrl"`
}

// Validate validates this subscription request
func (m *SubscriptionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxRetries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetryTimer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var subscriptionRequestTypeEventTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["created","deleted","all"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionRequestTypeEventTypePropEnum = append(subscriptionRequestTypeEventTypePropEnum, v)
	}
}

const (

	// SubscriptionRequestEventTypeCreated captures enum value "created"
	SubscriptionRequestEventTypeCreated string = "created"

	// SubscriptionRequestEventTypeDeleted captures enum value "deleted"
	SubscriptionRequestEventTypeDeleted string = "deleted"

	// SubscriptionRequestEventTypeAll captures enum value "all"
	SubscriptionRequestEventTypeAll string = "all"
)

// prop value enum
func (m *SubscriptionRequest) validateEventTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, subscriptionRequestTypeEventTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SubscriptionRequest) validateEventType(formats strfmt.Registry) error {

	if err := validate.Required("eventType", "body", m.EventType); err != nil {
		return err
	}

	// value enum
	if err := m.validateEventTypeEnum("eventType", "body", *m.EventType); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionRequest) validateMaxRetries(formats strfmt.Registry) error {

	if err := validate.Required("maxRetries", "body", m.MaxRetries); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionRequest) validateRetryTimer(formats strfmt.Registry) error {

	if err := validate.Required("retryTimer", "body", m.RetryTimer); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionRequest) validateTargetURL(formats strfmt.Registry) error {

	if err := validate.Required("targetUrl", "body", m.TargetURL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionRequest) UnmarshalBinary(b []byte) error {
	var res SubscriptionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
