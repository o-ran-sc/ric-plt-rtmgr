// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddSubscription subscribes event
*/
func (a *Client) AddSubscription(params *AddSubscriptionParams) (*AddSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addSubscription",
		Method:             "POST",
		PathPattern:        "/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddSubscriptionOK), nil

}

/*
DeleteSubscription unsubscribes event
*/
func (a *Client) DeleteSubscription(params *DeleteSubscriptionParams) (*DeleteSubscriptionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSubscription",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSubscriptionNoContent), nil

}

/*
DeployXapp deploys a xapp
*/
func (a *Client) DeployXapp(params *DeployXappParams) (*DeployXappCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeployXappParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deployXapp",
		Method:             "POST",
		PathPattern:        "/xapps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeployXappReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeployXappCreated), nil

}

/*
GetAllXapps returns the status of all xapps
*/
func (a *Client) GetAllXapps(params *GetAllXappsParams) (*GetAllXappsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllXappsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllXapps",
		Method:             "GET",
		PathPattern:        "/xapps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllXappsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllXappsOK), nil

}

/*
GetHealth healths check of x app manager
*/
func (a *Client) GetHealth(params *GetHealthParams) (*GetHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHealth",
		Method:             "GET",
		PathPattern:        "/health",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetHealthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHealthOK), nil

}

/*
GetSubscriptionByID returns the information of subscription
*/
func (a *Client) GetSubscriptionByID(params *GetSubscriptionByIDParams) (*GetSubscriptionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSubscriptionById",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSubscriptionByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSubscriptionByIDOK), nil

}

/*
GetSubscriptions returns all subscriptions
*/
func (a *Client) GetSubscriptions(params *GetSubscriptionsParams) (*GetSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSubscriptions",
		Method:             "GET",
		PathPattern:        "/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSubscriptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSubscriptionsOK), nil

}

/*
GetXappByName returns the status of a given xapp
*/
func (a *Client) GetXappByName(params *GetXappByNameParams) (*GetXappByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetXappByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getXappByName",
		Method:             "GET",
		PathPattern:        "/xapps/{xAppName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetXappByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetXappByNameOK), nil

}

/*
GetXappInstanceByName returns the status of a given xapp
*/
func (a *Client) GetXappInstanceByName(params *GetXappInstanceByNameParams) (*GetXappInstanceByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetXappInstanceByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getXappInstanceByName",
		Method:             "GET",
		PathPattern:        "/xapps/{xAppName}/instances/{xAppInstanceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetXappInstanceByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetXappInstanceByNameOK), nil

}

/*
ModifySubscription modifies event subscription
*/
func (a *Client) ModifySubscription(params *ModifySubscriptionParams) (*ModifySubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifySubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifySubscription",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifySubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifySubscriptionOK), nil

}

/*
UndeployXapp undeploys an existing xapp
*/
func (a *Client) UndeployXapp(params *UndeployXappParams) (*UndeployXappNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUndeployXappParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "undeployXapp",
		Method:             "DELETE",
		PathPattern:        "/xapps/{xAppName}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UndeployXappReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UndeployXappNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
