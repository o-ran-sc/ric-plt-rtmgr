// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	appmgr_model "routing-manager/pkg/appmgr_model"
)

// GetXappByNameReader is a Reader for the GetXappByName structure.
type GetXappByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetXappByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetXappByNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetXappByNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetXappByNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetXappByNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetXappByNameOK creates a GetXappByNameOK with default headers values
func NewGetXappByNameOK() *GetXappByNameOK {
	return &GetXappByNameOK{}
}

/*GetXappByNameOK handles this case with default header values.

successful operation
*/
type GetXappByNameOK struct {
	Payload *appmgr_model.Xapp
}

func (o *GetXappByNameOK) Error() string {
	return fmt.Sprintf("[GET /xapps/{xAppName}][%d] getXappByNameOK  %+v", 200, o.Payload)
}

func (o *GetXappByNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(appmgr_model.Xapp)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetXappByNameBadRequest creates a GetXappByNameBadRequest with default headers values
func NewGetXappByNameBadRequest() *GetXappByNameBadRequest {
	return &GetXappByNameBadRequest{}
}

/*GetXappByNameBadRequest handles this case with default header values.

Invalid ID supplied
*/
type GetXappByNameBadRequest struct {
}

func (o *GetXappByNameBadRequest) Error() string {
	return fmt.Sprintf("[GET /xapps/{xAppName}][%d] getXappByNameBadRequest ", 400)
}

func (o *GetXappByNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetXappByNameNotFound creates a GetXappByNameNotFound with default headers values
func NewGetXappByNameNotFound() *GetXappByNameNotFound {
	return &GetXappByNameNotFound{}
}

/*GetXappByNameNotFound handles this case with default header values.

Xapp not found
*/
type GetXappByNameNotFound struct {
}

func (o *GetXappByNameNotFound) Error() string {
	return fmt.Sprintf("[GET /xapps/{xAppName}][%d] getXappByNameNotFound ", 404)
}

func (o *GetXappByNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetXappByNameInternalServerError creates a GetXappByNameInternalServerError with default headers values
func NewGetXappByNameInternalServerError() *GetXappByNameInternalServerError {
	return &GetXappByNameInternalServerError{}
}

/*GetXappByNameInternalServerError handles this case with default header values.

Internal error
*/
type GetXappByNameInternalServerError struct {
}

func (o *GetXappByNameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /xapps/{xAppName}][%d] getXappByNameInternalServerError ", 500)
}

func (o *GetXappByNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
