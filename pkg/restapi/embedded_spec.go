// Code generated by go-swagger; DO NOT EDIT.

// ==================================================================================
// Unless otherwise specified, all software contained herein is licensed
// under the Apache License, Version 2.0 (the "Software License");
// you may not use this software except in compliance with the Software
// License. You may obtain a copy of the Software License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Software License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the Software License for the specific language governing permissions
// and limitations under the Software License.
//
// ==================================================================================
//
// Unless otherwise specified, all documentation contained herein is licensed
// under the Creative Commons License, Attribution 4.0 Intl. (the
// "Documentation License"); you may not use this documentation except in
// compliance with the Documentation License. You may obtain a copy of the
// Documentation License at
//
// https://creativecommons.org/licenses/by/4.0/
//
// Unless required by applicable law or agreed to in writing, documentation
// distributed under the Documentation License is distributed on an "AS IS"
// BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the Documentation License for the specific language governing
// permissions and limitations under the Documentation License.
// ==================================================================================
//
//

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the Swagger/OpenAPI 2.0 definition of Routing Manager's Northbound API.",
    "title": "Routing Manager",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.2.2"
  },
  "host": "rtmgr",
  "basePath": "/v1",
  "paths": {
    "/handles": {
      "get": {
        "description": "Placeholder for further usage.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "handle"
        ],
        "summary": "Placeholder for further usage",
        "operationId": "get_handles",
        "responses": {
          "200": {
            "description": "Dummy response"
          }
        }
      }
    },
    "/handles/xapp-handle": {
      "post": {
        "description": "By performing a POST method on the xapp-handle resource, the API caller is able to perform a callback on Routing Manager.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "handle"
        ],
        "summary": "Provide callback",
        "operationId": "provide_xapp_handle",
        "parameters": [
          {
            "description": "xApp related callback data",
            "name": "xapp-callback-data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/xapp-callback-data"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Callback received"
          },
          "400": {
            "description": "Invalid data"
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "By performing a GET method on the health resource, the API caller is able to retrieve the health of Routing Manager",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Retrive the health of Routing Manager",
        "operationId": "get_health",
        "responses": {
          "200": {
            "description": "The health of the system",
            "schema": {
              "$ref": "#/definitions/health-status"
            }
          }
        }
      }
    },
    "/routes": {
      "get": {
        "description": "By performing a GET method on the routes resource, the API caller is able to retrieve all routes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "route"
        ],
        "summary": "Retrieve the list of routes",
        "operationId": "get_routes",
        "responses": {
          "200": {
            "description": "All the routes",
            "schema": {
              "$ref": "#/definitions/routes"
            }
          }
        }
      },
      "put": {
        "description": "By performing a PUT method on the routes resource, the API caller is able to update an already existing route.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "route"
        ],
        "summary": "Update an existing route",
        "operationId": "update_route",
        "parameters": [
          {
            "description": "Route object that needs to be updated or created",
            "name": "route",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/route"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Route updated"
          },
          "400": {
            "description": "Invalid route ID supplied"
          },
          "404": {
            "description": "Route not found"
          }
        }
      },
      "post": {
        "description": "By performing a POST method on the routes resource, the API caller is able to create a new route.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "route"
        ],
        "summary": "Add new route",
        "operationId": "add_route",
        "parameters": [
          {
            "description": "Route object that needs to be created",
            "name": "route",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/route"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Route created"
          },
          "400": {
            "description": "Invalid route"
          }
        }
      }
    },
    "/routes/{route-id}": {
      "get": {
        "description": "Returns a single route",
        "produces": [
          "application/json"
        ],
        "tags": [
          "route"
        ],
        "summary": "Find route by ID",
        "operationId": "get_route_by_id",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of route to return",
            "name": "route-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/route"
            }
          },
          "400": {
            "description": "Invalid route ID supplied"
          },
          "404": {
            "description": "Route not found"
          }
        }
      },
      "put": {
        "description": "By performing a PUT method on a specific route referenced by the route-id the API caller is able to update that specific route",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "route"
        ],
        "summary": "Updates a route by explicitly referencing it by route-id",
        "operationId": "update-route-by-id",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of route that needs to be updated",
            "name": "route-id",
            "in": "path",
            "required": true
          },
          {
            "description": "The updated route instance",
            "name": "route",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/route"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Route updated"
          },
          "400": {
            "description": "Invalid route ID supplied"
          }
        }
      },
      "delete": {
        "description": "By performing a DELETE method on a specific route referenced by the route-id, the API caller is able to delete that specific route",
        "produces": [
          "application/json"
        ],
        "tags": [
          "route"
        ],
        "summary": "Deletes a route",
        "operationId": "delete_route_by_id",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the route that needs to be deleted",
            "name": "route-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Route deleted"
          },
          "400": {
            "description": "Invalid route ID supplied"
          },
          "404": {
            "description": "Route not found"
          }
        }
      }
    }
  },
  "definitions": {
    "health-status": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "healthy",
            "unhealthy"
          ]
        }
      }
    },
    "route": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "message-type": {
          "type": "integer",
          "format": "int64"
        },
        "receiver-groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/xapp-group"
          }
        },
        "senders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/xapp-instance"
          }
        }
      }
    },
    "routes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/route"
      }
    },
    "xapp-callback-data": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        },
        "data-version": {
          "type": "integer",
          "format": "int64"
        },
        "event": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "xapp-group": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/xapp-instance"
      }
    },
    "xapp-instance": {
      "type": "object",
      "required": [
        "address",
        "port"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "maximum": 65535
        }
      }
    }
  },
  "tags": [
    {
      "description": "Available handles",
      "name": "handle"
    },
    {
      "description": "Available routes",
      "name": "route"
    },
    {
      "description": "Health of the system",
      "name": "health"
    }
  ],
  "externalDocs": {
    "description": "Routing Manager",
    "url": "http://placeholder"
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the Swagger/OpenAPI 2.0 definition of Routing Manager's Northbound API.",
    "title": "Routing Manager",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.2.2"
  },
  "host": "rtmgr",
  "basePath": "/v1",
  "paths": {
    "/handles": {
      "get": {
        "description": "Placeholder for further usage.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "handle"
        ],
        "summary": "Placeholder for further usage",
        "operationId": "get_handles",
        "responses": {
          "200": {
            "description": "Dummy response"
          }
        }
      }
    },
    "/handles/xapp-handle": {
      "post": {
        "description": "By performing a POST method on the xapp-handle resource, the API caller is able to perform a callback on Routing Manager.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "handle"
        ],
        "summary": "Provide callback",
        "operationId": "provide_xapp_handle",
        "parameters": [
          {
            "description": "xApp related callback data",
            "name": "xapp-callback-data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/xapp-callback-data"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Callback received"
          },
          "400": {
            "description": "Invalid data"
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "By performing a GET method on the health resource, the API caller is able to retrieve the health of Routing Manager",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Retrive the health of Routing Manager",
        "operationId": "get_health",
        "responses": {
          "200": {
            "description": "The health of the system",
            "schema": {
              "$ref": "#/definitions/health-status"
            }
          }
        }
      }
    },
    "/routes": {
      "get": {
        "description": "By performing a GET method on the routes resource, the API caller is able to retrieve all routes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "route"
        ],
        "summary": "Retrieve the list of routes",
        "operationId": "get_routes",
        "responses": {
          "200": {
            "description": "All the routes",
            "schema": {
              "$ref": "#/definitions/routes"
            }
          }
        }
      },
      "put": {
        "description": "By performing a PUT method on the routes resource, the API caller is able to update an already existing route.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "route"
        ],
        "summary": "Update an existing route",
        "operationId": "update_route",
        "parameters": [
          {
            "description": "Route object that needs to be updated or created",
            "name": "route",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/route"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Route updated"
          },
          "400": {
            "description": "Invalid route ID supplied"
          },
          "404": {
            "description": "Route not found"
          }
        }
      },
      "post": {
        "description": "By performing a POST method on the routes resource, the API caller is able to create a new route.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "route"
        ],
        "summary": "Add new route",
        "operationId": "add_route",
        "parameters": [
          {
            "description": "Route object that needs to be created",
            "name": "route",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/route"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Route created"
          },
          "400": {
            "description": "Invalid route"
          }
        }
      }
    },
    "/routes/{route-id}": {
      "get": {
        "description": "Returns a single route",
        "produces": [
          "application/json"
        ],
        "tags": [
          "route"
        ],
        "summary": "Find route by ID",
        "operationId": "get_route_by_id",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of route to return",
            "name": "route-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/route"
            }
          },
          "400": {
            "description": "Invalid route ID supplied"
          },
          "404": {
            "description": "Route not found"
          }
        }
      },
      "put": {
        "description": "By performing a PUT method on a specific route referenced by the route-id the API caller is able to update that specific route",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "route"
        ],
        "summary": "Updates a route by explicitly referencing it by route-id",
        "operationId": "update-route-by-id",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of route that needs to be updated",
            "name": "route-id",
            "in": "path",
            "required": true
          },
          {
            "description": "The updated route instance",
            "name": "route",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/route"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Route updated"
          },
          "400": {
            "description": "Invalid route ID supplied"
          }
        }
      },
      "delete": {
        "description": "By performing a DELETE method on a specific route referenced by the route-id, the API caller is able to delete that specific route",
        "produces": [
          "application/json"
        ],
        "tags": [
          "route"
        ],
        "summary": "Deletes a route",
        "operationId": "delete_route_by_id",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the route that needs to be deleted",
            "name": "route-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Route deleted"
          },
          "400": {
            "description": "Invalid route ID supplied"
          },
          "404": {
            "description": "Route not found"
          }
        }
      }
    }
  },
  "definitions": {
    "health-status": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "healthy",
            "unhealthy"
          ]
        }
      }
    },
    "route": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "message-type": {
          "type": "integer",
          "format": "int64"
        },
        "receiver-groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/xapp-group"
          }
        },
        "senders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/xapp-instance"
          }
        }
      }
    },
    "routes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/route"
      }
    },
    "xapp-callback-data": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        },
        "data-version": {
          "type": "integer",
          "format": "int64"
        },
        "event": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "xapp-group": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/xapp-instance"
      }
    },
    "xapp-instance": {
      "type": "object",
      "required": [
        "address",
        "port"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0
        }
      }
    }
  },
  "tags": [
    {
      "description": "Available handles",
      "name": "handle"
    },
    {
      "description": "Available routes",
      "name": "route"
    },
    {
      "description": "Health of the system",
      "name": "health"
    }
  ],
  "externalDocs": {
    "description": "Routing Manager",
    "url": "http://placeholder"
  }
}`))
}
