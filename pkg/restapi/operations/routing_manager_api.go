// Code generated by go-swagger; DO NOT EDIT.

// ==================================================================================
// Unless otherwise specified, all software contained herein is licensed
// under the Apache License, Version 2.0 (the "Software License");
// you may not use this software except in compliance with the Software
// License. You may obtain a copy of the Software License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Software License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the Software License for the specific language governing permissions
// and limitations under the Software License.
//
// ==================================================================================
//
// Unless otherwise specified, all documentation contained herein is licensed
// under the Creative Commons License, Attribution 4.0 Intl. (the
// "Documentation License"); you may not use this documentation except in
// compliance with the Documentation License. You may obtain a copy of the
// Documentation License at
//
// https://creativecommons.org/licenses/by/4.0/
//
// Unless required by applicable law or agreed to in writing, documentation
// distributed under the Documentation License is distributed on an "AS IS"
// BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the Documentation License for the specific language governing
// permissions and limitations under the Documentation License.
// ==================================================================================
//
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"routing-manager/pkg/restapi/operations/handle"
	"routing-manager/pkg/restapi/operations/health"
	"routing-manager/pkg/restapi/operations/route"
)

// NewRoutingManagerAPI creates a new RoutingManager instance
func NewRoutingManagerAPI(spec *loads.Document) *RoutingManagerAPI {
	return &RoutingManagerAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		RouteAddRouteHandler: route.AddRouteHandlerFunc(func(params route.AddRouteParams) middleware.Responder {
			return middleware.NotImplemented("operation RouteAddRoute has not yet been implemented")
		}),
		RouteDeleteRouteByIDHandler: route.DeleteRouteByIDHandlerFunc(func(params route.DeleteRouteByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation RouteDeleteRouteByID has not yet been implemented")
		}),
		HandleGetHandlesHandler: handle.GetHandlesHandlerFunc(func(params handle.GetHandlesParams) middleware.Responder {
			return middleware.NotImplemented("operation HandleGetHandles has not yet been implemented")
		}),
		HealthGetHealthHandler: health.GetHealthHandlerFunc(func(params health.GetHealthParams) middleware.Responder {
			return middleware.NotImplemented("operation HealthGetHealth has not yet been implemented")
		}),
		RouteGetRouteByIDHandler: route.GetRouteByIDHandlerFunc(func(params route.GetRouteByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation RouteGetRouteByID has not yet been implemented")
		}),
		RouteGetRoutesHandler: route.GetRoutesHandlerFunc(func(params route.GetRoutesParams) middleware.Responder {
			return middleware.NotImplemented("operation RouteGetRoutes has not yet been implemented")
		}),
		HandleProvideXappHandleHandler: handle.ProvideXappHandleHandlerFunc(func(params handle.ProvideXappHandleParams) middleware.Responder {
                        fmt.Println("hello there")
			return middleware.NotImplemented("operation HandleProvideXappHandle has not yet been implemented")
		}),
		RouteUpdateRouteByIDHandler: route.UpdateRouteByIDHandlerFunc(func(params route.UpdateRouteByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation RouteUpdateRouteByID has not yet been implemented")
		}),
		RouteUpdateRouteHandler: route.UpdateRouteHandlerFunc(func(params route.UpdateRouteParams) middleware.Responder {
			return middleware.NotImplemented("operation RouteUpdateRoute has not yet been implemented")
		}),
	}
}

/*RoutingManagerAPI This is the Swagger/OpenAPI 2.0 definition of Routing Manager's Northbound API. */
type RoutingManagerAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// RouteAddRouteHandler sets the operation handler for the add route operation
	RouteAddRouteHandler route.AddRouteHandler
	// RouteDeleteRouteByIDHandler sets the operation handler for the delete route by id operation
	RouteDeleteRouteByIDHandler route.DeleteRouteByIDHandler
	// HandleGetHandlesHandler sets the operation handler for the get handles operation
	HandleGetHandlesHandler handle.GetHandlesHandler
	// HealthGetHealthHandler sets the operation handler for the get health operation
	HealthGetHealthHandler health.GetHealthHandler
	// RouteGetRouteByIDHandler sets the operation handler for the get route by id operation
	RouteGetRouteByIDHandler route.GetRouteByIDHandler
	// RouteGetRoutesHandler sets the operation handler for the get routes operation
	RouteGetRoutesHandler route.GetRoutesHandler
	// HandleProvideXappHandleHandler sets the operation handler for the provide xapp handle operation
	HandleProvideXappHandleHandler handle.ProvideXappHandleHandler
	// RouteUpdateRouteByIDHandler sets the operation handler for the update route by id operation
	RouteUpdateRouteByIDHandler route.UpdateRouteByIDHandler
	// RouteUpdateRouteHandler sets the operation handler for the update route operation
	RouteUpdateRouteHandler route.UpdateRouteHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *RoutingManagerAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *RoutingManagerAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *RoutingManagerAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *RoutingManagerAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *RoutingManagerAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *RoutingManagerAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *RoutingManagerAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the RoutingManagerAPI
func (o *RoutingManagerAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.RouteAddRouteHandler == nil {
		unregistered = append(unregistered, "route.AddRouteHandler")
	}

	if o.RouteDeleteRouteByIDHandler == nil {
		unregistered = append(unregistered, "route.DeleteRouteByIDHandler")
	}

	if o.HandleGetHandlesHandler == nil {
		unregistered = append(unregistered, "handle.GetHandlesHandler")
	}

	if o.HealthGetHealthHandler == nil {
		unregistered = append(unregistered, "health.GetHealthHandler")
	}

	if o.RouteGetRouteByIDHandler == nil {
		unregistered = append(unregistered, "route.GetRouteByIDHandler")
	}

	if o.RouteGetRoutesHandler == nil {
		unregistered = append(unregistered, "route.GetRoutesHandler")
	}

	if o.HandleProvideXappHandleHandler == nil {
		unregistered = append(unregistered, "handle.ProvideXappHandleHandler")
	}

	if o.RouteUpdateRouteByIDHandler == nil {
		unregistered = append(unregistered, "route.UpdateRouteByIDHandler")
	}

	if o.RouteUpdateRouteHandler == nil {
		unregistered = append(unregistered, "route.UpdateRouteHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *RoutingManagerAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *RoutingManagerAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *RoutingManagerAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *RoutingManagerAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *RoutingManagerAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *RoutingManagerAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the routing manager API
func (o *RoutingManagerAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *RoutingManagerAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/routes"] = route.NewAddRoute(o.context, o.RouteAddRouteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/routes/{route-id}"] = route.NewDeleteRouteByID(o.context, o.RouteDeleteRouteByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/handles"] = handle.NewGetHandles(o.context, o.HandleGetHandlesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/health"] = health.NewGetHealth(o.context, o.HealthGetHealthHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/routes/{route-id}"] = route.NewGetRouteByID(o.context, o.RouteGetRouteByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/routes"] = route.NewGetRoutes(o.context, o.RouteGetRoutesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/handles/xapp-handle"] = handle.NewProvideXappHandle(o.context, o.HandleProvideXappHandleHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/routes/{route-id}"] = route.NewUpdateRouteByID(o.context, o.RouteUpdateRouteByIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/routes"] = route.NewUpdateRoute(o.context, o.RouteUpdateRouteHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *RoutingManagerAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *RoutingManagerAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *RoutingManagerAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *RoutingManagerAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
